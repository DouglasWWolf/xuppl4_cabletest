# =================================================================
# This will send the specified number of packets of random
# data and then display the number of packets received
# =================================================================
source cabletest_api.sh

timestamp()
{
    date +%s
}

# By default, the throughput is 11,000 bytes per usec (i.e., 11 GB/sec)
bytes_per_usec=11000

# By default, we won't load the bitstreams
need_bitstream=0

# Parse the command line
while (( "$#" )); do
    if [ $1 == "-force" ]; then
        need_bitstream=1
        shift
    elif [ $1 == "-speed" ]; then
        bytes_per_usec=$2
        shift
        shift
    else
        xfer_packets=$1
        shift
    fi
done

# Ensure that $bytes_per_usec is valid
if [ -z $bytes_per_usec ] || [ $bytes_per_usec -lt 64 ]; then
    echo "Parameter after -speed must be at least 64"
    exit 1
fi

# Ensure that bytes_per_usec is a multiple of 64 (the CMAC bus is 64 bytes wide)
bytes_per_usec=$((bytes_per_usec / 64))
bytes_per_usec=$((bytes_per_usec * 64))


# Ensure that the user told how many packets to send
if [ "$xfer_packets" == "" ] || [ -z $xfer_packets ] || [ $xfer_packets -eq 0 ]; then
    echo "Need to specify a packet_count on the command line"
    exit 1
fi

# Is the bitstream not yet loaded?
test $(is_bitstream_loaded) -eq 0 && need_bitstream=1

# If we need to load the bitstreams into the FPGA, make it so
if [ $need_bitstream -eq 1 ]; then

    # Load the main bitstream
    echo "Loading cabletest bitstream..."
    ./load_bitstream.sh
    test $? -eq 0 || exit 1

    # Wait a moment for PCS lock to occur
    sleep 3
    echo "Bitstream loaded"
fi


# Tell the world which version we are
echo "xuppl4_cabletest RTL version" $(get_rtl_version)

# Display error message if we don't have PCS lock on the QSFP ports
have_pcs=1
if [ $(get_pcs_status 0) -eq 0 ]; then
    have_pcs=0;
    echo "No PCS lock detected on QSFP0" 1>&2
fi
if [ $(get_pcs_status 1) -eq 0 ]; then
    have_pcs=0;
    echo "No PCS lock detected on QSFP1" 1>&2
fi

# If we don't have QSFP lock, we can't continue
test $have_pcs -eq 0 && exit 1

# If a job is already runnning...
if [ $(is_busy) -ne 0 ]; then
    
    # Stop the job
    echo "Stopping running job..."
    stop

    # Give the receiver time to sense that the job
    # has been stopped and perform its reset
    sleep 2

    # Reset our datapath
    reset
fi

# Set the throughput speed
pcireg $REG_BYTES_PER_USEC $bytes_per_usec

# Set the packet size to 1024 bytes (i.e., 16 cycles * 64-bytes per cycle)
set_cycles_per_packet 16

# Find out how many data-cycles are in a packet
cycles_per_packet=$(get_cycles_per_packet)

# Compute the size of packet in bytes
packet_bytes=$((cycles_per_packet * 64))

# Determine exactly how many bytes we'll transfer across both channels
xfer_bytes=$((xfer_packets * 2 * packet_bytes))

# Perform a system reset
reset

# Start transferring packets
start $xfer_packets

# Find out when we started
ts1=$(timestamp)

# We're going to track the number of packets received.  If it 
# stops increasing, we'll halt the job 
prior_rcvd=-1
rcvd_sequence=0;

printf "%15i total packets (per channel) at %i MB/sec\n" $xfer_packets $bytes_per_usec
while [ 1 -eq 1 ]; do
    
    # Keep track of the current time
    ts2=$(timestamp)

    # If this job was halted by the user, wait a half-second for the
    # final packets to be received, then call it quits
    if [ $(is_halted) -eq 3 ]; then
        echo 
        echo "Halted by user"
        sleep .5
        exit 1 
    fi

    # How many packets have been sent on each channel?
    packets_sent1=$(get_packets_sent 1)
    packets_sent2=$(get_packets_sent 2)

    
    # "packets_sent" is the lesser of packets sent on the two channels
    if [ $packets_sent1 -lt $packets_sent2 ]; then
        packets_sent=$packets_sent1
    else
        packets_sent=$packets_sent2;
    fi

    # Compute the percentage complete
    percent=$((100 * packets_sent / xfer_packets))

    # Display our progress
    printf "\r%15i  [%3i%%] sent" $packets_sent $percent

    # If we're at 100%, we're done
    test $percent -eq 100 && break;

    # Pause a moment so we don't slam the PCI bus
    sleep .5

done


# Pause for 3 seconds, giving a visual indication that we're doing so
for i in $(seq 1 3); do
   sleep 1
   printf "."
done


# Make sure we get a linefeed at the end of our output
echo ""

# Find out many packets were received
packets_rcvd1=$(get_packets_rcvd 1)
packets_rcvd2=$(get_packets_rcvd 2)

printf "%15i received on QSFP_0\n" $packets_rcvd1
printf "%15i received on QSFP_1\n" $packets_rcvd2

# Compute the approximate number of seconds it took 
elapsed=$(( ts2 - ts1 ))

# If it took at least a second, display some basic statistics
if [ $elapsed -ne 0 ]; then 
    echo $elapsed Elapsed Seconds
fi




